//This is the code for the second Nano board, this board controls channel 5 through 8
//Designed and coded by N Dreverman

void setup() {
  Serial.begin(9600);
  Serial.setTimeout(1000);

  //TIMER0 - pin 5
  pinMode(5, OUTPUT);
  TCCR0A = 0;
  TCCR0B = 0;
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  TCCR0B |= (1 << WGM02) | (1 << CS02) | (1 << CS00);
  OCR0A = 173;  //TOP for 90Hz
  OCR0B = 50;   //Output compare register pin 5

  //TIMER1 - pin 9,10
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  TCCR1A = 0;
  TCCR1B = 0;
  TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1B1);
  TCCR1B |= (1<<CS12) | (1<<CS10) | (1<<WGM12) | (1<<WGM13);
  ICR1 = 173; //TOP for 90Hz
  OCR1A = 50; //COMPARE register pin 9
  OCR1B = 50; //COMPARE register pin 10

  //TIMER2 - pin 3
  pinMode(3, OUTPUT);
  TCCR2A = 0;
  TCCR2B = 0;
  TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
  TCCR2B |= (1 << WGM22) | (1 << CS22) | (1 << CS21) | (1 << CS20);
  OCR2A = 173;  //TOP for 90Hz
  OCR2B = 50;   //Output compare register pin 3

  //INTERRUPT - pin 8
  pinMode(8, INPUT_PULLUP);         // Pin 8 as input with pull-up resistor
  PCICR |= (1 << PCIE0);            // Enable Pin Change Interrupt for PCINT[7:0] (Port B)
  PCMSK0 |= (1 << PCINT0);          // Enable interrupt on PB0 (pin 8)
}


//INTERRUPTS
//Pin 8 Interrupt Event on ZeroCross
ISR(PCINT0_vect) {
  // code to execute
  if (PINB & B00000001) {
    //SET counters to TOP, cleared on next cycle. Reset timer to HIGH
    TCNT0 = 172;
    TCNT1 = 172;
    TCNT2 = 172;
  }
}

//Timer Overflow Interrupt Event
//Occurs when ZeroCrossing is not active -> Set output off
//ISR(TIMER0_OVF_vect) {
//  OCR0B = 0;
//  OCR1A = 0;
//  OCR1B = 0;
//  OCR2B = 0;
//}

// ----------------------------------------------------------------------------

//MAIN CODE HERE
int val = -1;
int chn = -1;

//Previous value On/Off (1/0)
int OCR0Bprev = 1;
int OCR1Aprev = 1;
int OCR1Bprev = 1;
int OCR2Bprev = 1;
//Target value
int OCR0Btrgt = 0;
int OCR1Atrgt = 0;
int OCR1Btrgt = 0;
int OCR2Btrgt = 0;
//Current value
int OCR0Bvalu = 100;
int OCR1Avalu = 75;
int OCR1Bvalu = 50;
int OCR2Bvalu = 25;
//FAST or SLOW transitions
int OCR0Bfast = 0;
int OCR1Afast = 0;
int OCR1Bfast = 0;
int OCR2Bfast = 0;

void loop() {
  //HANDLE INCOMING DATA IF AVAILABLE
  while (Serial.available() > 0) {
    String input = Serial.readStringUntil('\n');  // Read the incoming data until newline
    input.trim();                                 // Remove any leading or trailing whitespace

    chn = -1;
    val = -1;
    //CHECK FOR VALID INPUTS AND FINDING THE CHANNEL AND VALUE
    if (input.length() == 6 && input[0] == 'D' && input[3] == 'V') {
      //Value of 10-99
      // Extract the channel number (characters 1-2)
      String channelStr = input.substring(1, 3);
      // Extract the value percentage (characters 4-5)
      String valueStr = input.substring(4, 6);

      // Convert the extracted substrings to integers
      chn = channelStr.toInt();
      val = valueStr.toInt();
    } else if (input.length() == 5 && input[0] == 'D' && input[3] == 'V') {
      //Value of 0-9
      // Extract the channel number (characters 1-2)
      String channelStr = input.substring(1, 3);
      // Extract the value percentage (characters 4)
      String valueStr = input.substring(4, 5);

      // Convert the extracted substrings to integers
      chn = channelStr.toInt();
      val = valueStr.toInt();
    } else if (input.length() == 7 && input[0] == 'D' && input[3] == 'V') {
      //Value of 100
      // Extract the channel number (characters 1-2)
      String channelStr = input.substring(1, 3);
      // Extract the value percentage (characters 4-6)
      String valueStr = input.substring(4, 7);

      // Convert the extracted substrings to integers
      chn = channelStr.toInt();
      val = valueStr.toInt();
    }

    //DOUBLE CHECK IF THE CHANNEL AND VALUE ARE VALID, IF VALID SET REGISTER TARGET
    if (chn > -1 && chn < 11 && val > -1 && val < 101) {
      //New channel and values
      switch (chn) {
        case 5:
          Serial.print("Channel 1 selected with value: ");
          Serial.println(val);
          // Add specific functionality for channel 1
          OCR2Btrgt = map(val, 0, 100, 0, 156);  //Map OCR2B (pin 3) from percentage to required values
        break;
        case 6:
          Serial.print("Channel 2 selected with value: ");
          Serial.println(val);
          // Add specific functionality for channel 1
          OCR0Btrgt = map(val, 0, 100, 0, 156);  //Map OCR0B (pin 5) from percentage to required values
        break;
        case 7:
          Serial.print("Channel 3 selected with value: ");
          Serial.println(val);
          // Add specific functionality for channel 1
          OCR1Atrgt = map(val, 0, 100, 0, 156);  //Map OCR1A (pin 9) from percentage to required values
        break;
        case 8:
          Serial.print("Channel 4 selected with value: ");
          Serial.println(val);
          // Add specific functionality for channel 1
          OCR1Btrgt = map(val, 0, 100, 0, 156);  //Map OCR1B (pin 10) from percentage to required values
        break;
      }
      chn = -1;
      val = -1;
    }
  }

  //SET VALUE TO TARGET WITH EITHER FAST OR SLOW TRANSITION
  if ( OCR0Btrgt != OCR0Bvalu && OCR0Bfast == 0 ) {
    if (OCR0Btrgt < OCR0Bvalu) {
      OCR0Bvalu--;
    } else {
      OCR0Bvalu++;
    }
    delay(1);
  } else if (OCR0Btrgt != OCR0Bvalu && OCR0Bfast == 1) {
    OCR0Bvalu = OCR0Btrgt;
  }
  if ( OCR1Atrgt != OCR1Avalu && OCR1Afast == 0 ) {
    if (OCR1Atrgt < OCR1Avalu) {
      OCR1Avalu--;
    } else {
      OCR1Avalu++;
    }
    delay(1);
  } else if (OCR1Atrgt != OCR1Avalu && OCR1Afast == 1) {
    OCR1Avalu = OCR1Atrgt;
  }
  if ( OCR1Btrgt != OCR1Bvalu && OCR1Bfast == 0 ) {
    if (OCR1Btrgt < OCR1Bvalu) {
      OCR1Bvalu--;
    } else {
      OCR1Bvalu++;
    }
    delay(1);
  } else if (OCR1Btrgt != OCR1Bvalu && OCR1Bfast == 1) {
    OCR1Bvalu = OCR1Btrgt;
  }
  if ( OCR2Btrgt != OCR2Bvalu && OCR2Bfast == 0 ) {
    if (OCR2Btrgt < OCR2Bvalu) {
      OCR2Bvalu--;
    } else {
      OCR2Bvalu++;
    }
    delay(1);
  } else if (OCR2Btrgt != OCR2Bvalu && OCR2Bfast == 1) {
    OCR2Bvalu = OCR2Btrgt;
  }

  //CHECK IF A TIMER NEEDS TO BE TURNED ON/OFF (Only Timer1 and Timer2)
  if ( (OCR1Avalu == 0 && OCR1Bvalu == 0) && (OCR1Aprev > 0 || OCR1Bprev > 0) ) {
    //Transition from non-zero to 0
    //Timer1 off
    Serial.println("Turning timer1 off");
    OCR1A = 0;
    OCR1B = 0;
    TCNT1 = 173;
    delay(20);
    TCCR1B &= ~((1 << CS12) | (1 << CS10)); // Disable the timer's prescaler (stop the timer)
    OCR1Aprev = 0;
    OCR1Bprev = 0;
    Serial.println("timer1 off");
  } else if ( (OCR1Avalu > 0 || OCR1Bvalu > 0) && (OCR1Aprev == 0 && OCR1Bprev == 0) ) {
    //Transition from 0 to non-zero
    Serial.println("Turning timer1 on");
    TCCR1A = 0;
    TCCR1B = 0;
    TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1B1);
    TCCR1B |= (1<<CS12) | (1<<CS10) | (1<<WGM12) | (1<<WGM13); // Start the timer with the desired settings
    OCR1Aprev = 1;
    OCR1Bprev = 1;
    Serial.println("timer1 on");
  }

  if (OCR2Bvalu == 0 && OCR2Bprev > 0) {
    //Transition from non-zero to 0
    OCR2B = 0;
    TCNT2 = 173;
    delay(20);
    TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20)); // Disable the timer's prescaler (stop the timer)
    OCR2Bprev = 0;
  } else if (OCR2Bvalu > 0 && OCR2Bprev == 0) {
    //Transition from 0 to non-zero
    TCCR2B |= (1 << WGM22) | (1 << CS22) | (1 << CS21) | (1 << CS20); // Start the timer with the desired settings
    OCR2Bprev = 1;
  }

  //SET THE REGISTER TO THE CURRENT VALUE
  OCR0B = OCR0Bvalu;
  OCR1A = OCR1Avalu;
  OCR1B = OCR1Bvalu;
  OCR2B = OCR2Bvalu;
}
