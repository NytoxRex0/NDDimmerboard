esphome:
  name: dimmerboard1-master
  friendly_name: dimmerboard1-master

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "KEY_HERE"

ota:
  - platform: esphome
    password: "PW_HERE"

#wifi:
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password
#  manual_ip:
#    static_ip: STATIC_IP_HERE
#    gateway: 192.168.0.1
#    subnet: 255.255.255.0

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 1

  manual_ip:
    static_ip: STATIC_IP_HERE
    gateway: 192.168.0.1
    subnet: 255.255.255.0

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12

mcp23s17:
  - id: 'mcp23s17_hub'
    cs_pin: GPIO02
    deviceaddress: 0

globals:
  - id: dim1_direction_is_up
    type: int
    restore_value: no
    initial_value: '1'

binary_sensor:
  - platform: gpio
    name: "Switch 1"
    id: sw1
    pin:
      mcp23xxx: mcp23s17_hub
      number: 0  # Switch 1 - 1 = 0
      mode:
        input: true
        pullup: true
      inverted: false
    filters:
      - delayed_on_off: 50ms
    on_press:
      - delay: 1s
      - while:
          condition:
            binary_sensor.is_on: sw1
          then:
            - if:
                condition:
                  - lambda: "return id(dim1_direction_is_up) == 1;"
                then:
                  - logger.log: Hold (Dimming Up)
                  - light.dim_relative:
                      id: dimmer1
                      relative_brightness: 2%
                      transition_length: 0s
                      brightness_limits:
                        min_brightness: 10%
                        max_brightness: 90%
                else:
                  - logger.log: Hold (Dimming Down)
                  - light.dim_relative:
                      id: dimmer1
                      relative_brightness: -2%
                      transition_length: 0s
                      brightness_limits:
                        min_brightness: 10%
                        max_brightness: 90%
            - delay: 0.1s
      - if:
          condition:
            - lambda: "return id(dim1_direction_is_up) == 1;"
          then:
            - globals.set:
                id: dim1_direction_is_up
                value: '0'
          else:
            - globals.set:
                id: dim1_direction_is_up
                value: '1'
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: Double Clicked
          - light.turn_on:
              id: dimmer1
              brightness: 100%
              transition_length: 0s
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: Single Short Clicked
          - light.toggle: dimmer1
  - platform: gpio
    name: "Switch 2"
    id: sw2
    pin:
      mcp23xxx: mcp23s17_hub
      number: 1  # Switch 2 - 1 = 1
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 3"
    id: sw3
    pin:
      mcp23xxx: mcp23s17_hub
      number: 2  # Switch 3 - 1 = 2
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 4"
    id: sw4
    pin:
      mcp23xxx: mcp23s17_hub
      number: 3  # Switch 4 - 1 = 3
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 5"
    id: sw5
    pin:
      mcp23xxx: mcp23s17_hub
      number: 4  # Switch 5 - 1 = 4
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 6"
    id: sw6
    pin:
      mcp23xxx: mcp23s17_hub
      number: 5  # Switch 6 - 1 = 5
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 7"
    id: sw7
    pin:
      mcp23xxx: mcp23s17_hub
      number: 6  # Switch 7 - 1 = 6
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 8"
    id: sw8
    pin:
      mcp23xxx: mcp23s17_hub
      number: 7  # Switch 8 - 1 = 7
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 9"
    id: sw9
    pin:
      mcp23xxx: mcp23s17_hub
      number: 8  # Switch 9 - 1 = 8
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 10"
    id: sw10
    pin:
      mcp23xxx: mcp23s17_hub
      number: 9  # Switch 10 - 1 = 9
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 11"
    id: sw11
    pin:
      mcp23xxx: mcp23s17_hub
      number: 10  # Switch 11 - 1 = 10
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 12"
    id: sw12
    pin:
      mcp23xxx: mcp23s17_hub
      number: 11  # Switch 12 - 1 = 11
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 13"
    id: sw13
    pin:
      mcp23xxx: mcp23s17_hub
      number: 12  # Switch 13 - 1 = 12
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 14"
    id: sw14
    pin:
      mcp23xxx: mcp23s17_hub
      number: 13  # Switch 14 - 1 = 13
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 15"
    id: sw15
    pin:
      mcp23xxx: mcp23s17_hub
      number: 14  # Switch 15 - 1 = 14
      mode:
        input: true
        pullup: true
      inverted: false
  - platform: gpio
    name: "Switch 16"
    id: sw16
    pin:
      mcp23xxx: mcp23s17_hub
      number: 15  # Switch 16 - 1 = 15
      mode:
        input: true
        pullup: true
      inverted: false

uart:
  id: uart_bus
  tx_pin: GPIO04
  baud_rate: 9600

# Template output for the virtual dimmer
output:
  - platform: template
    id: output1
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer1).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer1).current_values.get_brightness()*100));
                  std::string str = "D01V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D01V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output2
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer2).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer2).current_values.get_brightness()*100));
                  std::string str = "D02V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D02V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output3
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer3).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer3).current_values.get_brightness()*100));
                  std::string str = "D03V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D03V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output4
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer4).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer4).current_values.get_brightness()*100));
                  std::string str = "D04V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D04V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output5
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer5).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer5).current_values.get_brightness()*100));
                  std::string str = "D05V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D05V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output6
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer6).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer6).current_values.get_brightness()*100));
                  std::string str = "D06V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D06V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output7
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer7).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer7).current_values.get_brightness()*100));
                  std::string str = "D07V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D07V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output8
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer8).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer8).current_values.get_brightness()*100));
                  std::string str = "D08V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D08V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
  - platform: template
    id: output9
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer9).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer9).current_values.get_brightness()*100));
                  std::string str = "D09V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D09V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;  
  - platform: template
    id: output10
    type: float
    write_action: 
      then:
        - if:
            condition:
              - lambda: 'return id(dimmer10).current_values.is_on();'
            then:
              - uart.write: !lambda |-
                  std::string val = to_string((int)(id(dimmer10).current_values.get_brightness()*100));
                  std::string str = "D10V" + val + "\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
            else:
              - uart.write: !lambda |-
                  std::string str = "D10V0\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;
              - delay: 0.1s
              - uart.write: !lambda |-
                  std::string str = "Done\n";
                  std::vector<uint8_t> vec(str.begin(), str.end());
                  return vec;                                                                                                                                              
            
# Dimmer Control (Expose to Home Assistant)
light:
  - platform: monochromatic
    name: "Dimmer Channel 1"
    id: dimmer1
    output: output1
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 2"
    id: dimmer2
    output: output2
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 3"
    id: dimmer3
    output: output3
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 4"
    id: dimmer4
    output: output4
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 5"
    id: dimmer5
    output: output5
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 6"
    id: dimmer6
    output: output6
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 7"
    id: dimmer7
    output: output7
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 8"
    id: dimmer8
    output: output8
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 9"
    id: dimmer9
    output: output9
    default_transition_length: 0s
  - platform: monochromatic
    name: "Dimmer Channel 10"
    id: dimmer10
    output: output10
    default_transition_length: 0s
